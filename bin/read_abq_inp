#!/usr/bin/gawk -f
# $Id$
#
# (c) 2009 Benedict Verhegghe
# This is an embryonal awk script to extract information from an Abaqus
# input file and write it in a format that can be loaded easily into
# pyFormex.
#
# Usage:    gawk -f read_abq.awk ABAQUS_INPUT_FILE
#
# Currently it reads nodes and elements and stores them in files
#   partname_nodes.txt and partname_elems.txt
# The nodes should be numbered consecutively in each of the parts,
# but not necessarily over the different parts.
#
#

######## scanner #######################

# initialisation: set default part name
BEGIN { mode=0; start_part("DEFAULT_PART"); }

# start a new part
/^\*\* PART INSTANCE:/ { start_part($4); print "**PART "$4; next; }
/^\*Part,/ { sub(".*name=",""); sub(" .*",""); start_part($0); print "*Part "$0; next; }

# skip all other comment lines
/^\*\*/ { next; }

# start a node block: record the number of the first node
/^\*Node/ { 
    start_mode(1)
    getline; gsub(",",""); header = "# nodes "outfile " offset "$1
}

# start an element block
/^\*Element,/ { 
    start_mode(2) 
    getline; header = "# elems "outfile " nplex "NF-1

}

# skip other commands
/^\*/ { print "Unknown command: "$0;  end_mode(); next;}

# output data according to output mode
{ 
    if (mode==1) print_node();
    else if (mode==2) print_elem();    
}

END { end_mode(); }

######## functions #####################

# start a new part with name pname
function start_part(pname) {
    partname = pname
    meshfile = partname".mesh"
    printf("") > meshfile
    nodesblk = -1
    elemsblk = -1
}


# start a new output file with given name and type
function start_mode(mod) {
    end_mode()

    mode = mod
    if (mode==1) {
	type = "nodes"
	nodesblk += 1
	blk = nodesblk
    }
    else if (mode==2) {
	type = "elems"
	elemsblk += 1
	blk = elemsblk
    }
    outfile = partname"."type
    if (blk > 0) outfile = outfile""blk 
    print "Starting mode "mode" to file "outfile 
    printf("") > outfile
    count = 0
}

# stop writing to the current file
function end_mode() {
    if (mode>0) {
	print "Ending mode "mode
	print header" count "count >> meshfile
	mode = 0
    }
}

# print a node
function print_node() {
    gsub(",",""); print $2," ",$3," ",$4 >> outfile;
    count += 1;
}

# print an element
function print_elem() {
    gsub(",",""); print $2" "$3" "$4" "$5" "$6" "$7" "$8" "$9 >> outfile;
    count += 1;
}

# End