
pyFormex 0.6  Releasenotes 
============

This is a collection of the most prominent changes in pyFormex 0.6
(compared to the prevous release 0.5)

INSTALLATION
============

COMMAND LINE
============

pyformex --gui script ...
will now execute the specified scripts in the GUI.


GUI:
====


CORE:
=====

The implementation of the Formex class has changed drastically!!

The coordinates and most of the methods that only deal with coordinate
information are now implemented by a new class Coords, defined in coords.py.
This was done so that the Coords class and all its transformations can be 
reused in other data structures, such as (geometric) surfaces or Finite Element
models.

The Coords class is a subclass of numpy's ndarray, so that all
numeric array processing can be applied on a Coords object.
The class is somewhat more general than the former Formex coords attribute:
the shape of a Coords array can be anything if only the last axis has a length
of 3. (As a convenience in initializing Coords arrays, an array with last axis
length 1 or 2 will be expanded to 3 by adding 0.0 coordinates).

While this change is a very important one, the changes to the Formex API are
minimal. This means that user scripts will only rarely need to 
be changed (mostly where you directly accessed the coordinates attribute f).
 

- formex.py:
  
  The distanceFrom... (Plane,Line,Point) functions were turned into Formex
  class methods. The function versions are deprecated and will be removed
  in future.

  Formex class:
    - distanceFromPlane(p,n), distanceFromLine(p,n), distanceFromPoint(p)

    - translate(vector,distance) will now translate over vctor*distance,
      not over unitVector(vector)*distance.

    - withProp(val) now also accepts a list/array of property values. 
 
 
- draw.py:
  removed about(): use info() instead
  added question()

- widgets.py:

  InputDialog: The 2nd and 4th field of the 'select' type have been switched.


PLUGINS:
========
formex_menu:  has lots of additional functions.
surface_menu: is now functional
objects: starts a unified framework for future plugins 


MANUAL:
=======
