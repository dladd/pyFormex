#!/bin/bash
#
#  Script to create Debian packages
#
#

# source the version data
. ../RELEASE

TEMPLATES=debian/


usage() {
    cat << EOF
Usage: $(basename $0) [ -r RELEASE ]  CMD...
Where CMD is one of:
  clean : clean the current unpack directories to allow new build
 unpack : Unpacks the current .tar.gz release from dist
  build : test-build the Debian packages for the current release
  final : sign-build the Debian packages for the current release
 upload : upload the Debian packages to Debian mentors
 pkglst : create list of files in the packages


The normal chain in creating the packages is:
  _do clean
  _do unpack
  _do build

When starting on a new release, use:
  _do prepare
  _do unpack
  _do build

When the packages are ready, create the final with:
  _do clean
  _do unpack
  _do final

EOF
}

setup() {
    PYFDIR=pyformex-$RELEASE

    if [ "$RELEASE" = "$VERSION" ]; then
	reltype="official"
	SOURCE=../dist/pyformex/pyformex-$RELEASE.tar.gz
    else
	reltype="interim"
	SOURCE=../dist/pyformex-$RELEASE.tar.gz
    fi
    echo "Working on $PYFDIR ($reltype release)"
    ORIG=pyformex_$RELEASE.orig.tar.gz

    [ -f $PYFDIR/debian/changelog ] && PKGVER=$(expr "$(head -n 1 $PYFDIR/debian/changelog)" : '.*(\(.*\)).*')
}


# Prepare for a new release
prepare() {
    dch -v $RELEASE-1
}
# Prepare for a package fix
preparefix() {
    dch -i
}

unpack() {
    [ -d "$PYFDIR" ] && rm -rf $PYFDIR
    tar xf $SOURCE
    rsync $TEMPLATES $PYFDIR/debian --exclude .svn -a
    ln -fn ${SOURCE} ${ORIG}
    # For now !!!
    #rm $PYFDIR/debian/*.doc-base
}


build() {
    pushd $PYFDIR
    debuild -us -uc
    popd
}


buildlib() {
    pushd $PYFDIR
    debuild -i -us -uc -B
    popd
}


install() {
    sudo debi pyformex_${PKGVER}_amd64.changes
}

pkglst() {
    debc pyformex_${PKGVER}_amd64.changes > pkglst
}

final() {
    pushd $PYFDIR
    debuild
    popd
}


# return the name of the changes file
getchanges() {
    PKGVER=$(expr "$(head -n 1 $PYFDIR/debian/changelog)" : '.*(\(.*\)).*')
    echo "pyformex_${PKGVER}_amd64.changes"
}


upload() {
    CHANGES=$(getchanges)
    echo Uploading ${CHANGES}
    [ -f "$CHANGES" ] && dput mentors $CHANGES
}


REPOHOST=bumps
REPOPATH=/var/www/repos/debian
REPO=${REPOHOST}:${REPOPATH}/incoming
uploadlocal() {
    rsync *_$RELEASE[.-]* $REPO -avn
    read -p "Do you want to upload these packages ?" ans
    if [ "$ans" = "y" -o "$ans" = "Y" ]; then
	rsync *_$RELEASE[.-]* $REPO -av
    fi
}

publocal() {
    CHANGES=$(getchanges)
    echo Publishing ${CHANGES}
    ssh ${REPOHOST} reprepro -b ${REPOPATH} include sid ${REPOPATH}/incoming/${CHANGES}
}


clean() {
    pushd $PYFDIR
    dh_clean
    popd
}


# Remove workdir
distclean() {
    clean
    rm -rf $PYFDIR
}


# Remove all: workdir + packages
mrproper() {
    distclean
    rm -f *_$RELEASE[.-]*
}

## This does not work yet

_bump() {
    OLDPKGVER=$(expr "$(head -n 1 $PYFDIR/debian/changelog)" : '.*(\(.*\)).*')
    ARCHDIR=uploaded/${OLDPKGVER}
    mkdir $ARCHDIR && mv pyformex_${PKGVER}[_.]* $ARCHDIR
    pushd $PYFDIR
    dch -i
    PKGVER=$(expr "$(head -n 1 debian/changelog)" : '.*(\(.*\)).*')
    sed -i "s|pyformex(=$OLDPKGVER)|pyformex(=$PKGVER)|" debian/control
    popd
    cp $PYFDIR/debian/control $PYFDIR/debian/changelog debian-ex
}


[ "$1" = "-r" ] && {
    RELEASE="$2"
    shift 2
}

setup
[ -n "$1" ] || { echo "For help about usage: _do usage" ; exit; }
for cmd in "$@"; do
    $cmd
done
