# $Id$
# This file is for internal communication between developers.
# It will not be included in releases (as opposed to README/History)
###########################################################################
2004-10-08 BV: Bart, Ik heb deze file gemaakt als een extra communicatiemiddel
(naast bv. E-mail), omdat op deze manier onze bedenkingen en besprekingen over
het projekt gemakkelijk kunnen samen gehouden worden. 
###########################################################################
2004-10-08 BV: Het volgende heb ik naar hier overgebracht uit de README file

But this is a list of things we want to do before we go public:

- introduce all (or most) of the formian functions
- provide basic documentation
- make a clean GUI
- provide output facilities (text and graphics)
- make a formian to pyformex translator

And these ideas might be useful:
- on installation, create a remove script
- create a batch run mode
###########################################################################
2004-10-08 BV: Properties kunnen gezet worden. Ofwel bij creatie:
  F = Formex({...},props=...)
ofwel achteraf : F.setProps(...)
props kan een enkel getal zijn (dan krijgen alle elementen die prop),
of een lijst/array/.. : als je bv [1,1,3] toekent aan een formex met 7 
elementen, krijgen die de properties  1,1,3,1,1,3,1 
Properties kunnen al afgedrukt worden (zie test), maar worden nog niet
gekopieerd.
###########################################################################
2004-10-08 BV: Mijn plannen:
   - kopieren van properties toevoegen.
   - property gebruiken voor het tekenen in verschillende kleuren
###########################################################################
2004-10-09 BV: Dit is allemaal vlotter verlopen dan ik gedacht had.
Properties worden nu overal meegekopieerd.
En ze kunnen zichtbaar gemaakt worden via de drawProp funktie.
(Zie het voorbeeld ColorDoubleLayer
###########################################################################
2004-10-13 BV: De functies unique en nodes geimplementeerd. nodes geeft
gewoon de volledige formex terug, maar als losse knopen. NOrmaal zal men
F.nodes().unique() gebruiken om unieke knopenset te bekomen. Een formex met
enkel knopen kan nu ook getekend worden (zie voorbeeld hyparcap).
###########################################################################
2004-10-15 BV: Tot nu toe gebruikte ik mijn standaard editor (XEmacs) om
voorbeelden te maken en uit te proberen. Maar misschien moet wij een editor
inbouwen in pyformex.
Ik wil ook werk maken van de sorteer funktie, het verwijderen van elementen,
en het omzetten van een formex naar een knooppnummerlijst.
Tenslotte zijn er nog een aantal belangrijke formian funkties niet 
geimplementeerd. Hier zou jij me kunnen helpen, Bart. Vooral de funkties
die nodig zijn om enkele mooie voorbeelden uit je afstudeerwerk te kunnen
reproduceren. O.a. glisit, sbd, bapel, nnov,...
Als dat er allemaal is, kunnen we, denk ik, het projekt naar buiten brengen.
############################################################################
2004-10-25 BV: Ik probeer zoveel mogelijk de from ...import * te vermijden,
voornamelijk omdat dan bij de generatie van documentatie met pydoc ook alle
imports weergegeven worden, wat zeer lang duurt en tot veel te omvangrijke 
docs leidt.
Ik ben ook aan het experimenteren met de smooth rendering voor vlakken.
Ik probeer de wireframe display niet te beschadigen.
############################################################################
2004-12-7 B(art)D(esloovere) :Het hyparcap voorbeeld zou nu ook moeten lopen.
Ok, benedict, ik zal met plezier de formex functies vervolledigen. Ik zal zelf
 wel nog voor enkele op zoek moeten gaan naar de juiste definities. 
(Heb wat 'gecopypaste' voor mijn afstudeerwerk :-P, tja, tijdsgebrek...) 
Het lijkt me ook interessant de pattern() functie uit de formex module uit te 
breiden met generaties naar boven en beneden. Quote van BD: "Waar 
ik ook aan denk is het toevoegen van enkele procedures om 
transformatiefunkties te genereren die dan met map() kunnen gebruikt 
worden om een topologie op de gewenste geometrie over te brengen " Interessant:
dit past perfect in een typische strategie om ruimtelijke staafconstructies te genereren. Zo is trouwens ook de hyparcap tot stand gekomen.
############################################################################
2004-12-09 BV: Hyparcap voorbeeld is prachtig. Heb wat kleur toegevoegd. 
Men zou zowaar pyformex alleen al voor de schoonheid van de creaties gaan 
gebruiken. Heb je het stars voorbeeld al gezien (louter Spielerei natuurlijk).
***
Wat back-ends betreft: ik vind dat die best onafhankelijke programma's blijven
die gaan werken met de data die pyformex creeert. Best overdracht via een tekst
bestand. Maar wij zouden in pyformex een mogelijkheid kunnen voorzien om die er
aan te haken en aldus vanuit pyformex de uitvoering te starten, en eventuele
resultaten (bv. een vervormde constructie) terug te krijgen. Een beetje zoals
ook GiD doet met de berekeningsmodules. Dat hoeft niet veel meer te zijn dan
een standaard directory waar scripts kunnen geplaatst worden die met een 
standaard stel parameters (naam van datafile,...) opgeroepen kunnen worden.
En eventueel een standaard opmaak van data in zo'n file. De scripts zouden 
eenvoudig door ze op de juiste plaats te zetten in het menu van pyformex 
verschijnen (zoals de voorbeelden).
Ik zou geen grotere koppeling maken dan het displayen van de gevonden scripts
en de mogelijkheid om zij op te roepen.
Ik weet wel dat de gebruiker dit door de opvatting van pyformex en python ook
allemaal zelf kan doen vanuit het script dat hij maakt om zijn formex te
bouwen, maar ik vrees dat dat precies te veel zal zijn voor de gewone
gebruiker en dat een gedefinieerde interface met ingebouwde aanroep veel
aantrekkelijker is. Ik vergelijk weer een beetje met GiD. 
***
Wat het naar buiten opengooien van het project betreft: Ik vind dat wij dat 
stilaan kunnen gaan doen. Ik zou het niet openen voor andere ontwikkelaars
(in elk geval nu nog niet), maar wel de 'releases' laten downloaden.
Om te vermijden dat onze servers overloaded raken, en om meer veiligheid en 
zichtbaarheid te hebben, wil ik dat liefst op een open source hosting site 
doen. In tegenstelling met mijn vroegere plannen denk ik nu eerder aan 
berlios.de i.p.v. sourceforge. Voornamelijk omdat berlios ook subversion 
toegang biedt en sourceforge enkel CVS. En ook een beetje omdat berlios
europees is. 
Nog een puntje in dit verband: de copyright notice en copyright license.
De license kan wat mij betreft alleen de GNU GPL zijn (anders zouden wij
wellicht de precieze implicaties moeten nagaan van alles wat wij gebruiken).
De GPL steunt sterk op copyright bescherming die in vele landen automatisch is.
Maar ook dan is het nog best om alvast elk tekstbestand van een copyright
notice te voorzien. Er zijn twee mogelijkheden: ofwel plaatsen wij elk ons
copyright merk bij de gedeelten die wij schrijven, ofwel plaatsen wij in elk
bestand eenzelfde notice met ons beider namen. Tot nu toe deed ik dat merken
automatisch (via het Stamp programmaatje). Dit is natuurlijk alleen bruikbaar 
met een gemeenschappelijke notice. Ik pleit dus daarvoor.
***
Ik heb eeb file TODO gemaakt, waarin wij kunnen bijhouden wat wij willen doen
en een soort roadmap bijhouden naar komende releases. Niets om ons strikt aan
te houden, maar vooral om plannen die wij eens gemaakt hebben niet weer te 
vergeten. Ook niet voor gedetailleerde uiteenzettingen, die houden wij hier.
***
Rotatie met de muis gaat m.i. handig in GiD (ik vind het alvast veel beter
dan in ABAQUS/CAE). Ik zou de werking van GiD hierbij willen benaderen. 
Maar voorlopig denk ik de rotatie om de camera-as te koppelen aan de afstand
tot het centrum van de figuur, zodat wij alvast ook om die as kunnen roteren.
***
Ik heb bij de Qt voorbeelden een eenvoudig helpsysteem gevonden dat wij bijna
direct kunnen inpluggen en aldus een on-line manual beschikbaar stellen.  
############################################################################
