.. $Id$    -*- rst -*-
  
..
  This file is part of pyFormex 0.8.6  (Mon Jan 16 21:15:46 CET 2012)
  pyFormex is a tool for generating, manipulating and transforming 3D
  geometrical models by sequences of mathematical operations.
  Home page: http://pyformex.org
  Project page:  http://savannah.nongnu.org/projects/pyformex/
  Copyright 2004-2011 (C) Benedict Verhegghe (benedict.verhegghe@ugent.be)
  Distributed under the GNU General Public License version 3 or later.
  
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see http://www.gnu.org/licenses/.
  
  


pyFormex 0.8.7  Releasenotes
============================

This is a collection of the most prominent changes in pyFormex 0.8.7
compared to the previous release 0.8.6. There are a lot of new features,
code reorganizations and bug fixes. The most important new feature is a new
model for user applications. Besides the classical `pyFormex script`, there
is now also a `pyFormex app`. The rules for these are slighly different, but
when sticking to some simple rules, a single source file may be executed 
either as a script or as an app. The main purpose of the new app model twofold:

- allow an applications to easily import definitions from another app,
- allow an application to be run from a compiled file, with having the .py 
  source available.


Installation
------------
- The installation procedure for (some of) the extra packages has been
  changed. They now rely more on installed or installable packages from
  your distribution. This will allow to create binary packages for them.

- We have set up a local repository where intermediate releases in Debian
  package format can be found.


Gui
---
  

Documentation
-------------


Command line
------------
- two options (debug, debulevel) to support the debug level setting. See
  man page or `pyformex --help`.


Configuration
-------------


Core
----
- adjacency.py: new module holding a specialized Adjacency class. This replaces
  and extends some methods that were previously available in connectivity.py.
  The Adjacency class provides general front progression algorithms.
- track.py: new module defining the classes TrackedDict and TrackedList. These
  are like the corresponding Python dict and list, but with tracking 
  facilities added, allowing to know whether or not changes have been applied
  to the contents. 
- fileread.py: a collection of general functions for reading geometrical data
  from a file. It is mostly intended to be used by specific file format
  converters/importers.
- olist.py: new list manipulation functions `remove` and `toFront`. 
- olist.List: new *experimental* class which allows execution of a method
  on each of its members. 
- Implemented debug levels, allowing debug messages to be switched on/off.  
- arraytools: new functions: concat, complement, sortSubsets, multiplicity,
  unitDivisor, uniformParamValues
  In `vectorRotation`, upvec now defaults to None.
- project: Project is now a TrackedDict
- connectivity.Connectivity: a mask can be used to construct partial adjacency
  arrays.
- coords.py: new functions bboxIntersection, testBbox, align. 
  New Coords methods: apt, sort, boxes


Gui 
---

Widgets
-------


Drawing
-------

Scripting
---------


Plugin menus
------------


Plugins
-------
- new plugin pyformex_gts: contains all the functionality using the GTS library
  and external gts commands.
- new plugin dxf_tools: contains functionality for reading and writing .DXF
  files. Currently limited to line type objects (line, polyline, arc, circle),
  but easily expandable.
- new plugin meshlist, defining a MeshList class. Consider using the olist.List
  class instead.

External
--------

Examples
--------

Data
----
The data directory contains a modified teapot model.

.. End
