pyFormex 0.4 - release notes
==============================

As of version 0.4 the minimum requirements are:

Python 2.3  (2.4 recommended)
Numpy 0.9.8 (1.0.2 recommended)
Qt4 + PyQt4 (Qt3 will no longer work!)



Short overview of the most important design and feature changes
===============================================================

- Base -
A recent version of Numpy (Version 0.9.8 or higher) is required.
Version 1.0.2 or higher is recommended.


- Source splitup -
The pyFormex source files have been split up over three modules: the core
files with everything that is essential to pyFormex, the gui module with
 all GUI related files, and the Plugins, where (optional) extensions are
 located.


- Gui -
We switched to Qt4. You may have to install PyQt4 from source, because
most distributions do not have binary packages available yet.


- Using pyFormex without GUI -
pyFormex can now be used without the GUI by adding the --nogui option.
This is especially useful for automated batch processing of scripts.


- Configuration -
The configuration system has been changed so that only the preferences
that were changed are saved to the user's config file.


- Help system -
There is no longer a built-in help viewer. You can use your prefered 
HTML browser or the QT4 assistant.


- Documentation -
A first (though incomplete) version of the upcoming pyFormex manual is
 included in this distribution. The tutorial part may be a good starting
point for learning to use pyFormex.


Detailed (but incomplete) changes since Release 0.3:
=======================================================

pyformex command
----------------
- The pyformex startup script is now called pyformex.py instead of pyformex.
  The installation procedure however links it to an executable named pyformex.
- The option --nogui starts up pyFormex without the GUI. 
- The option --config sets a (user) configuration file to be read in excess of
  the default configuration files and to be used for saving changed settings.
- The option --nodefaultconfigs suppresses the loading of all default config 
  files, except for the required initialization settings 
- The option --redirect captures output to sys.stdout and displays it inside
  the GUI message board. 


pyformex GUI
------------
- Settings->Save Preferences: saves the preferences on demand


formex.py
---------
- distanceFromPlane(f,p,n) : calculates distance of points to a plane
- readfile(file,sep=',',plexitude=1,dimension=3) : reads a Formex from file
- bbox(formexlist): calculates the bounding box of a list of Formices
- spherical(): now uses latitude angle instead of its complement; has an extra
  option to still use the complement.


Formex class:
-------------
- Clipping functions:
 where(self,nodes='all',dir=0,xmin=None,xmax=None)
 clip(w)
 cclip(w)

simple.py: Predefined simple geometric forms
----------
- circle: defines circles as Formex structure
- Sphere2: a sphere described by line elements
- Sphere3: a sphere described by triangles

gui module
==========

draw.py:
--------


canvas.py:
----------
canvas has a setBgColor method to set the background color


camera.py:
----------
changes needed by upgrade to numpy 0.9.8
 

mydict.py:
----------
The __repr__ and __str__ functions of the Dict and CascadingDict classes have
been reworked to provide sensible/clean output:
__repr__ (formatting with %r) will result in a string that is valid Python
to recreate the object, for both Dict and CascadingDict.
__str__ (formatting with %s) is equivalent to __repr__ for the Dict class, but
results in a nicely cascading format for the CascadingDict 


plugins module
==============
properties.py: functions to attribute fysical properties to points/elements

f2abq.py: functions to export a Formex model (including properties) as a 
          Finite Element model in Abaqus(R) input file format.

stl.py: functions to import/export/process surface models in STL format
   write_ascii(a,f) now writes unit-length normals

tetgen.py: functions to generate tetraeder meshes inside an STL format 
           surface mesh: requires the tetgen program from
           http://tetgen.berlios.de/
  
stl_abq.py: functions to export STL surface models and tetraeder volume models
            generated by tetgen.py to Abaqus(R) input file format.
