#!/usr/bin/env python
#
import sys,time,string,os

def Stamp():
    """Stamp files with copyright notice and date 

    Stamp [options] [replacements] [<files>]
        Will stamp the source files with our copyright and date
        If no -d option is given, the output file will be named
        <sourcefile>.stamped
    Options:
        -d<dir> : output files go in <dir> with original name (the dir
             part of the input file is stripped); make sure that the
             specified path exists and is not equal to the input path
        -t<stamp> : use file <stamp> for stamping. A stamp file is a text
             file where each line starts with '##'. It can also contain one or
             more of the following text strings, which will be replaced by the
             appropriate string:
               '%datetime%' will be replaced with the date/time
             Any other string of the form '%text%' will be replaced with
             'replacement' if an argument 'text=replacement' was specified
             on the command line. (see Replacements).
             If you omit the -t option, a dull standard text will be generated.
        -o<stamp> : save the (modified) stamp to file <stamp>. This is useful
             for having the same time stamp over different invocations.
        -v : be verbose
        -h : show this help
    Beware that options with arguments are glued together!
    Replacements:
      Any arguments of the type 'key=value' will be added to the replacement
      dictionary. As a result a string '%key%' in the stamp file will be
      replaced with 'value' in the actual stamp.
    Any other argument that is a file name, will be subjected to stamping.
    Replacements and filenames may be interspersed, but any replacement will
    only be active for the files following it.
"""
    global stamp,stamptime,outdir,verbose
    verbose = 0
    outdir = None
    savefile = None
    stampfile = None
    stamptime = time.asctime()
    repl = { '%datetime%' : stamptime }
    stamp = """##
## This file is part of Unspecified Someversion Release %s
## Unspecified is an unspecified software package
## (c) Copyright is held by Somebody, which you can reach somewhere@this.earth
## Distributed under the General Public License, see file COPYING for details
## 
""" % stamptime
    count = 0
    for a in sys.argv[1:]:
        opt = a[0:2]
        if opt == "-h":
            print Stamp.__doc__
            return
        if opt == "-v":
            verbose = 1
            continue
        elif opt == "-t":
            if verbose:
                print "Using stamp from file %s" % a[2:]
            stamp = file(a[2:],'r').read()
            continue
        elif opt == "-o":
            if verbose:
                print "Saving stamp to file %s" % a[2:]
            stamp = Replace(stamp,repl)
            file(a[2:],'w').write(stamp)
            continue
        elif opt == "-d":
            outdir = a[2:]
            if verbose:
                print "Output files go to "+outdir
            continue
        # it is not a recognized option
        l = string.find(a,'=')
        if l > -1:
            # it is a replacement
            repl['%'+a[:l]+'%'] = a[l+1:]
        elif os.path.isfile(a) :
            # it is a file
            stamp = Replace(stamp,repl)
            if count==0 and verbose:
                print "Stamping files with stamp\n"+stamp
            count += StampFile(a)
        else:
            if verbose:
                print "Skipped unrecognized argument '%s'\n" % a
    print "%d file(s) stamped" % count

def Replace(text,repl):
    """Perform a set of replacements in text.

    text is any string. repl is a dictionary. Each occurrence of a key
    of repl will be replaced with the corresponding value.
    """
    for k,v in repl.iteritems():
        text = string.replace(text,k,v)
    return text

def StampFile(name):
    """Stamp the file with given name"""
    global stamp,outdir,verbose
    if verbose:
        print "Stamping %s" % name
    fil = file(name,'r')
    line = fil.readline()
    # first character should start comments
    # we detect python, bash, fortran, tex and friends
    if line[0] not in  "#*%":
        if verbose:
            print "This is not a stampable file "
        return 0
    mark = line[0]
    if outdir:
        oname = outdir+'/'+os.path.basename(name)
    else:
        oname = name+".stamped"
#    if os.path.samefile(name,oname):
#        if verbose:
#            print "Output filename is same as input, skipping "
#        return 0
    fout = file(oname,'w')
    fout.write(line)
    # adapt the stamp to the detected file type
    mark2 = mark+mark
    if mark2 != '##':
        stamp = string.replace(stamp,'##',mark2);
    # check if file has an "$Id" line and echo it
    line = fil.readline()
    if line[0]==mark and string.find(line,"$Id") >= 0:
        fout.write(line)
        line = fil.readline()
    # check if file has a stamp, and eat it
    if line[0:2]==mark2:
        line = fil.readline()
    if line[0:2]==mark2 and string.find(line,"This file is part of") >= 0:
        while line[0:2]==mark2:
            line = fil.readline()
    # print stamp
    fout.write(stamp)
    fout.write(line)
    fout.writelines(fil.readlines())
    fil.close()
    fout.close()
    return 1

Stamp()
