
Style for source and text files used by the pyFormex project
============================================================

#
# This file holds some recommendations about the style to be used for
# pyFormex development and the use of the subversion repository.
#

- Make sure the following is in your subversion configuration 
  (~/.subversion/config):

global-ignores = *~ *.pyc
use-commit-times = yes
enable-auto-props = yes
[auto-props]
*.py = svn:eol-style=native;svn:keywords=Id


- All new source files in the pyFormex repository should be created with the
  following line on the first OR second line:
# $Id$

- Name of .py files should be only lowercase, except for the approved
  examples distributed with pyFormex, which should start wih an upper case.
 
- Start text (also .py) files with the following line:

- A first line different from the above may be used to flag an executable
  script, as in the examples below.

- Start executable python scripts with the following two lines:

#!/usr/bin/env python
# $Id$

- Start pyformex GUI scripts with the following two lines:

#!/usr/bin/env pyformex --gui
# $Id$

- Start pyformex batch scripts with the following two lines:

#!/usr/bin/env pyformex --nogui
# $Id$

- End your text files with a line

# End

- In Python files, use 4 blanks for indenting, not TABs.  

- Never directly edit the $Id line: it is automatically handled by subversion

- .py files may/should end with a section

if __name__ == "__main__":

  followed by whatever is needed to test the functionality of the module

- exported names should preferably follow the convention:
  - all lowercase for (global) variable names
  - lowerUpperUpper for function names
  - UpperUpperUpper for class names


- do not put blanks around operators, except for the assignment
  operator, where you should always use ' = '

- all functions/methods/classes/modules should have a docstring, consisting
  of a single first line with the short description, possibly followed 
  by a blank line and an extended description.
  It is recommended to add an extended description for any but trivial 
  components.

- Some numpy specifics:
=======================

- Preference:    attributes  >>   methods   >>    functions
- E.g. use A.shape instead of shape(A)

