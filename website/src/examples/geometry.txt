# 	-*- html -*-
restindex	
    crumb: Geometry
    format: html
    page-title: Create 3D Geometry
    encoding: utf-8
    output-encoding: None
/restindex
  
  <h2>Creating spatial structures</h2>
  
  <h3>Hesperia dome</h3>
  The Hesperia dome is a enormous construction made of glass on top of a hotel in Barcelona. A parametric 3D model of this dome was created with pyFormex, which allows to evaluate geometric variations changing one or more parameters (e.g. the span or height of a dome, the amount of secondary triangles, etc.) as shown in the figure below. As illustrated, geometries can be displayed in several ways (e.g. wireframe, flat, smooth, transparent). Automated generation of finite element input files can be incorporated in pyFormex. 
  <table align="center">
    <tr>
      <td>
      <div align="center"><img src="<% path_to_root %>../images/hesperia3.jpg" alt="Dome of the Hesperia hotel, Barcelona" border="0" vspace="20"/></div>
      </td>
      <td>
      <div align="center"><img src="<% path_to_root %>../images/hesperia_var.png" alt="Variants of the Hesperia dome" border="0" hspace="5" vspace="20"/></div>
      </td>
     </tr>
  </table>
  
  <h3>Hyparcap</h3>
  A space frame in the form of a five-pointed star of hypars.
  <br/>
  <br/>
  <br/>
<div align ="center"><img src="<% path_to_root %>../images/Hyparcap.png" alt="Hypar Cap" border="0"/></div>
<br/>
<br/>

<h3>Scallop dome</h3>
Example showing the parametric capabilities of pyFormex. Both domes are createdby the same small script, by only changing two parameters.
<table align="center">
  <tr>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/scallop8.png" alt="Scallop dome variant" border="0" hspace="5" vspace="20"/></div>
    </td>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/scallop12.png" alt="Another scallop dome variant" border="0" hspace="5" vspace="20"/></div>
    </td>
  </tr>
</table>

<h3>SpaceTrussRoof</h3>
A space truss used for the roof of an industrial building. Click on the picture to view a large size animated gif.
<br/>
<br/>
<br/>
<div align ="center"><a href="<% path_to_root %>../images/roof-movie.gif"><img src="<% path_to_root %>../images/SpaceTrussRoof.png" alt="Space Truss Roof" border="0"/></a></div>
<br/>
<br/>


<h3>Geodesic Dome</h3>
This example illustrates the use of surface elements. It shows four steps in the creation of a geodesic dome.
<table align="center">
  <tr>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/Geodesic-1.png" alt="Geodesic dome step 1" border="0" hspace="15" vspace="20"/></div>
    </td>
    <td>
      First we create two triangles. We give them different colors so that they are easy to distinguish.<br/><br/>
      <pre>
v=0.5*sqrt(3.)
a = Formex([[[0,0],[1,0],[0.5,v]]],1)
aa = Formex([[[1,0],[1.5,v],[0.5,v]]],2)
      </pre>
    </td>
  </tr>
  <tr>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/Geodesic-2.png" alt="Geodesic dome step 2" border="0" hspace="15" vspace="20"/></div>
    </td>
    <td>
      Next we copy the triangles a number of times in two directions, generating the triangular pattern at the left.<br/><br/>
      <pre>
m=5; n=5;
d = a.replic2(m,min(m,n),1.,v,bias=0.5,taper=-1)
dd = aa.replic2(m-1,min(m-1,n),1.,v,bias=0.5,taper=-1)
      </pre>
    </td>
    
  </tr>
  <tr>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/Geodesic-3.png" alt="Geodesic dome step 3" border="0" hspace="15" vspace="20"/></div>
    </td>
    <td>
      Then we copy-rotate the pattern into a hexagon.<br/><br/>
      <pre>
e = (d+dd).rosette(6,60,point=[m*0.5,m*v,0])
</pre>
    </td>
    
  </tr>
  <tr>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/Geodesic-4.png" alt="Geodesic dome completed" border="0" hspace="15" vspace="20"/></div>
    </td>
    <td>
      Lastly the pattern is mapped on a sphere, resulting in a geodesic dome from which we give a perspective view.<br/><br/>
      <pre>
f = e.mapd(2,lambda d:0.8*sqrt((m+1)**2-d**2),e.center(),[0,1])
</pre>
    </td>
    
  </tr>
  
</table>


<h2>Creating stent geometries</h2>

<h3>Wire stent</h3>
A single layered (top) and a double layered (bottom) wire stent. Both are generated by the script below.
<div align="center"><img src="<% path_to_root %>../images/WireStent.png" alt="Wire Stent" border="0" hspace="15" vspace="20"/></div>
<pre>
#!/usr/bin/env pyformex
class WireStent:
    def __init__(self,r,l,nx,ny,nb,dz,connectors=True):
        dz = 0.5*dz
        bump_z=lambda x: 1.-(x/nb)**2
        base = Formex(pattern('1')).replic(nb,1.0).bump1(2,[0.,0.,dz],bump_z,0)
        base = base.scale([1./nb,1./nb,1.])
        NE = base.shear(1,0,1.)
        SE = base.reflect(2).shear(1,0,-1.)
        NE.setProp(1)
        SE.setProp(3)
        cell1 = (NE+SE).rosette(2,180)
        if connectors:
            cell1 += Formex([[NE[0][0],SE[0][0]]],2)
        cell2 = cell1.reflect(2)
        cell1 = cell1.translate([1.,1.,0.])
        cell2 = cell2.translate([-1.,-1.,0.])
        dx = 4.
        dy = 4.
        F = (cell1+cell2).replic2(nx,ny,dx,dy)
        F = F.translate([0.,0.,r])
        self.F = cylindrical(dir=[2,0,1],scale=[1.,360./(nx*dx),l/ny/dy])
    def all(self):
        return self.F

clear()
F = WireStent(10.,200.,12,12,4,1.).all()
G = WireStent(8.,200.,12,12,4,1.).all()
draw(F)
draw(G)
draw(F.translate([0.,30.,0.]))
</pre><br/>

<h3>Balloon expandable stent</h3>
pyFormex can be used for the parametric design of balloon expandable stents. As illustrated below, both the geometric design and the mesh can easily be modified.
<table align="center">
  <tr>
    <td>
    <div align ="center"><img src="<% path_to_root %>../images/BalloonExpandableStent1.png" alt="Balloon Expandable Stent 1" border="0"/></div>
    </td>
    <td>
    <div align ="center"><img src="<% path_to_root %>../images/BalloonExpandableStent2.png" alt="Balloon Expandable Stent 2" border="0"/></div>
    </td>
  </tr>
</table>


<h2>Creating illustrations</h2>

<h3>Stars</h3>
pyFormex can also be used for other purposes. This collection of stars was generated by the script shown below.
<br/>
<br/>
<br/>
<div align ="center"><img src="<% path_to_root %>../images/stars.png" alt="stars" border="0"/></div>
<br/>
{colorize;stars.py} 
<br/>
<br/>

<h3>Other illustrations</h3>

<table align="center">
  <tr>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/lima.png" alt="Lindemayer plant" border="0" hspace="5" vspace="20"/></div>
    </td>
    <td>
    <div align="center"><img src="<% path_to_root %>../images/KochLine.png" alt="Koch Line" border="0" hspace="5" vspace="20"/></div>
    </td>
  </tr>
</table>
