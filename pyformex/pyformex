#!/usr/bin/env python
# $Id$
##
## This file is part of pyFormex 0.5 Release Mon Jul 30 13:38:48 2007
## pyFormex is a Python implementation of Formex algebra
## Website: http://pyformex.berlios.de/
## Copyright (C) Benedict Verhegghe (benedict.verhegghe@ugent.be) 
##
## This program is distributed under the GNU General Public License
## version 2 or later (see file COPYING for details)
##
"""pyFormex is a program for the design and manipulation of 3D geometry.

"""

# Get the pyformex dir and put it on the head of sys.path
import sys,os
scriptdir = sys.path[0]

# In case we execute the pyformex script from inside the
# pyformex package dir: add the parent to the front of sys.path
# to pick up this package by preference

if scriptdir.endswith('pyformex'):
    sys.path[:0] = [ os.path.dirname(scriptdir) ]

try:
    import pyformex
    # we could remove the sys.path[0] again?
except:
    print "Could not import pyformex."
    print "This probably means that pyFormex was not properly installed."

pyformexdir = pyformex.__path__[0]
sys.path[:0] = [ pyformexdir ]


GD = pyformex
import utils
from config import Config
from optparse import OptionParser,make_option

###########################  main  ################################


def refLookup(key):
    """Lookup a key in the reference configuration."""
    return GD.refcfg[key]


def printcfg(key):
    try:
        print "!! refcfg[%s] = %s" % (key,GD.refcfg[key])
    except KeyError:
        pass
    print "!! cfg[%s] = %s" % (key,GD.cfg[key])

        

###########################  app  ################################

def runApp(args):
    """Run the application without gui."""
    # remaining args are interpreted as scripts, possibly interspersed
    # with arguments for the scripts.
    # each script should pop the required arguments from the list,
    # and return the remainder
##    GD.message = message

    while len(args) > 0:
        scr = args.pop(0) 
        if os.path.exists(scr) and utils.isPyFormex(scr):
            play(scr,args)
        else:
            raise RuntimeError,"No such pyFormex script found: %s" % scr

    
def main(argv=None):
    """This is a fairly generic main() function.

    It is responsible for reading the configuration file(s),
    processing the command line options and starting the application.
    The basic configuration file is 'pyformexrc' located in the pyformex
    directory. It should always be present and be left unchanged.
    You can copy this file to another location if you want to make changes.
    By default, pyformex will try to read the following extra configuration
    files (in this order:
       default settings:     <pyformexdir>/pyformexrc
       system-wide settings: /etc/pyformexrc
       user settings:        $HOME/.pyformexrc
       local settings        $PWD/.pyformexrc
    Also, an extra config file can be specified in the command line.
    Config file settings always override previous ones.
    On exit, the preferences that were changed are written to the last
    read config file. Changed settings are those that differ from the settings
    in all but the last one.
    """
    # this allows us to call main from the interpreter
    if argv is None:
        argv = sys.argv[1:]
        
    # get/set the path to the pyformex files, and store it in the config
    #pyformexdir = os.path.dirname(os.path.realpath(argv[0]))
    # use a read, not an update, to set the pyformexdir as a variable
    GD.cfg = Config()
    GD.cfg.read("pyformexdir = '%s'\n" % pyformexdir)

    # get/set the user's home dir
    if os.name == 'posix':
        homedir = os.environ['HOME']
    elif os.name == 'nt':
        homedir = os.environ['HOMEDRIVE']+os.environ['HOMEPATH']
    GD.cfg.read("homedir = '%s'\n" % homedir)

    # Process options
    parser = OptionParser(
        usage = "usage: %prog [<options>] [ --  <Qapp-options> ] [[ scriptname [scriptargs]] ...]",
        version = pyformex.Version,
        option_list=[
        make_option("--gui", help="start the GUI (default if no scriptfile argument is given)",
                    action="store_true", dest="gui", default=None),
        make_option("--nogui", help="do not load the GUI (default if a scriptfile argument is given)",
                    action="store_false", dest="gui", default=None),
        make_option("--force-dri", help="Force use of Direct Rendering",
                    action="store_true", dest="dri", default=None),
        make_option("--force-nodri", help="Disables the Direct Rendering",
                    action="store_false", dest="dri", default=None),
        make_option("--uselib", help="Use the pyFormex C lib if available. This is the default.",
                    action="store_true", dest="uselib", default=None),
        make_option("--nouselib", help="Do not use the pyFormex C-lib.",
                    action="store_false", dest="uselib", default=None),
        make_option("--safelib", help="Convert data types to match C-lib. This is the default.",
                    action="store_true", dest="safelib", default=True),
        make_option("--unsafelib", help="Do not convert data types to match C-lib. BEWARE: this may make the C-lib calls impossible. Use only for debugging purposes.",
                    action="store_false", dest="safelib", default=True),
        make_option("--fastencode", help="Use a fast algorithm to encode edges.",
                    action="store_true", dest="fastencode", default=False),
        make_option("--fastfuse", help="Use a fast algorithm to fuse points.",
                    action="store_true", dest="fastfuse", default=True),
        make_option("--nofastfuse", help="Use a slow algorithm to fuse points.",
                    action="store_true", dest="fastfuse", default=True),
        make_option("--experimental", help="Use experimental averaging method.",
                    action="store_true", dest="experimental", default=False),
##         make_option("--alpha", help="Enable the Alpha Channel buffer",
##                     action="store_true", dest="alpha", default=False),
        make_option("--arrays", help="Use vertex arrays for display",
                    action="store_true", dest="arrays", default=False),
        make_option("--config", help="use file CONFIG for settings",
                    action="store", dest="config", default=None),
        make_option("--nodefaultconfig", help="skip all default locations of config files",
                    action="store_true", dest="nodefaultconfig", default=False),
        make_option("--redirect", help="redirect standard output to the message board (ignored with --nogui)",
                    action="store_true", dest="redirect", default=False),
        make_option("--detect", help="Detect helper software and print report.",
                    action="store_true", dest="detect", default=False),
        make_option("--debug", help="display debugging info to sys.stdout",
                    action="store_true", dest="debug", default=False),
        make_option("--test", help="testing mode: only for developers!",
                    action="store_true", dest="test", default=False),
        make_option("--whereami", help="show where the pyformex package is located",
                    action="store_true", dest="whereami", default=False),
        make_option("--remove", help="remove the pyformex installation",
                    action="store_true", dest="remove", default=False),
        ])
    GD.options, args = parser.parse_args(argv)
    GD.print_help = parser.print_help

    if GD.options.whereami:
        print "Script started from %s" % scriptdir
        print "I found pyFormex in %s " %  pyformexdir
        sys.exit()
        
    if GD.options.remove:
        print """
BEWARE!
This procedure will remove the complete pyformex installation!
The pyformex installation is in: %s
The pyformex executable script is in: %s
You will need proper permissions to actually delete the files.
""" % (pyformexdir,scriptdir)
        s = raw_input("Are you sure you want to remove pyFormex? yes/NO: ")
        if s == 'yes':
            print "Removing %s" % pyformexdir
            utils.removeTree(pyformexdir)
            script = os.path.join(scriptdir,'pyformex')
            egginfo = "%s-%s.egg-info" % (pyformexdir,GD.__version__.replace('-','_'))
            for f in [ script,egginfo ]:
                if os.path.exists(f):
                    print "Removing %s" % f
                    os.remove(f)
            print "\nBye, bye! I won't be back until you reinstall me!"
        elif s.startswith('y') or s.startswith('Y'):
            print "You need to type exactly 'yes' to remove me."
        else:
            print "Thanks for letting me stay this time."
        sys.exit()

    if GD.options.detect:
        print "Detecting all installed helper software"
        utils.checkExternal()
        utils.printDetected()
        sys.exit()

    GD.debug("Options: %s" % GD.options)

    # Read the config files
    defaults = os.path.join(pyformexdir,"pyformexrc")
    if os.name == 'posix':
        siteprefs = '/etc/pyformexrc'
        prefs = '.pyformexrc'
    elif os.name == 'nt':
        siteprefs = None  # Where does Windoze put site prefs?
        prefs = 'pyformex.cfg'
    homeprefs = os.path.join(homedir,prefs)
    localprefs = os.path.join(os.getcwd(),prefs)

    sysprefs = filter(os.path.exists,[defaults,siteprefs])
    # ?? WE SHOULD ALWAYS CREATE .pyformexrc?
    userprefs = filter(os.path.exists,[homeprefs,localprefs])
    if GD.options.nodefaultconfig:
        sysprefs = sysprefs[0:1]
        userprefs = []
    if GD.options.config:
        userprefs.append(GD.options.config)
    refprefs = sysprefs + userprefs[:-1]
    for f in refprefs:
        GD.debug("Reading config file %s" % f)
        GD.cfg.read(f) 
    # Save this config as a reference, then load last user config file
    GD.refcfg = GD.cfg
    GD.debug("RefConfig: %s" % GD.refcfg)
    GD.cfg = Config(default=refLookup)
    if len(userprefs) > 0:
        GD.preffile = userprefs[-1] # Settings will be saved here
        GD.debug("Reading config file %s" % GD.preffile)
        GD.cfg.read(GD.preffile)
    GD.debug("Config: %s" % GD.cfg)

    # Set option from config if it was not explicitely given
    if GD.options.uselib is None:
        GD.options.uselib = GD.cfg['uselib'] 
        

    # Set default --nogui if first remaining argument is a pyformex script.
    if GD.options.gui is None:
        GD.options.gui = not (len(args) > 0 and utils.isPyFormex(args[0]))

    # Run the application with the remaining arguments
    # Importing the gui should be done after the config is set !!
    if GD.options.gui:
        from gui.gui import runApp
    #
    # THE FOLLOWING DOES NOT HELP, BECAUSE WITH GUI, Qt4 sets the locale back
    # Still, we leave it here, because one day we may load the gui before
    # starting runapp
    #
    import locale
    locale.setlocale(locale.LC_NUMERIC, 'C')

    res = runApp(args)

    #Save the preferences that have changed
    GD.savePreferences()

    # Exit
    return res


#### Go

if __name__ == "__main__":
    sys.exit(main())

# The following lines make Emacs recognize this as Python source,
# even though the filename has no .py extension

# Local Variables #
# mode:Python #
# End #


#### End
