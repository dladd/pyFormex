#!/usr/bin/env python
# $Id$
##
## This file is part of pyformex 0.1.2 Release Fri Jul  9 14:48:57 2004
## pyformex is a python implementation of Formex algebra
## (c) 2004 Benedict Verhegghe (email: benedict.verhegghe@ugent.be)
## Releases can be found at ftp://mecatrix.ugent.be/pub/pyformex/
## Distributed under the General Public License, see file COPYING for details
##
"""pyformex is a python implementation of Formex algebra"""

Version="pyFormex 0.1"

from formex import *
from canvas import *

import sys,time,os.path,string
import threading

 
class FileSelectionDialog(qt.QFileDialog):
    """A file selection dialog widget.

    You can specify a default path/filename that will be suggested
    initially.
    If a pattern is specified, only matching files will be shown.
    A pattern can be something like 'Images (*.png *.jpg)'.
    Default mode is to accept only existing files. You can specify
    any QFileDialog mode (e.g. QFileDialog.AnyFile to accept new files)
    
    """
    def __init__(self,default=None,pattern=None,mode=qt.QFileDialog.ExistingFile):
        qt.QFileDialog.__init__(self,default,pattern)
        self.setMode(mode)
        self.show()
    def getFilename(self):
        self.exec_loop()
        if self.result() == qt.QDialog.Accepted:
            return str(self.selectedFile())
        else:
            return None
      
def AddMenuItems(menu, items=[]):
    """Add a list of items to a menu.

    Each item is a tuple of three strings : Type, Text, Value.
    Type is one of 'Sep', 'Popup', 'Action'.
    'Sep' is a separator item. Its Text and Value fields are not used.
    For the other types, Text is the text that will be displayed in the
    menu. It can include a '&' character to flag the hotkey.
    
    'Popup' is a popup submenu item. Its value should be an item list.
    'Action' is an active item. Its value is an instruction that is to be
    executed when the item is activated. It will be executed by calling
    python's eval(Value) instruction.
    !!! For now, Actions are limited to global function names (no arguments)
    
    'VAction' is a tuple of an action and an integer argument.
    'QAction' signals that value is a qt QAction. Text may be None if it
    was already set in constructuting the QAction.
    """
    for key,txt,val in items:
        if key == "Sep":
            menu.insertSeparator()
        elif key == "Popup":
            pop = qt.QPopupMenu(menu,txt)
            AddMenuItems(pop,val)
            menu.insertItem(txt,pop)
        elif key == "Action":
            menu.insertItem(txt,eval(val))
        elif key == "VAction":
            id = menu.insertItem(txt,eval(val[0]))
            menu.setItemParameter(id,val[1])
        elif key == "Statement":
            menu.insertItem(txt,val)
        elif key == "QAction":
            if txt:
                val.setProperty("menuText",qt.QVariant(txt))
            val.addTo(menu)
        else:
            raise RuntimeError, "Invalid key %s in menu item"%key
        

MenuData = [
    ("Popup","&File",[
        ("Action","&Save","save"),
        ("Action","Save &As","saveAs"),
        ("Action","Save &Image","saveImage"),
        ("Sep",None,None),
        ("Action","&Play","play"),
        ("Action","&Record","record"),
        ("Sep",None,None),
        ("Action","E&xit","exit"), ]),
    ("Popup","&Display",[
        ("Action","&Print","printit"), 
        ("Action","&Bbox","printbbox"), 
        ("Action","&Globals","printglobals"), 
        ("Action","&Wireframe","wireframe"), 
        ("Action","&Smooth","smooth"),
        ("Action","&Clear","clear"),
        ("Action","&Redraw","redraw"), ]),
    ("Popup","&Camera",[
        ("Action","&Zoom In","zoomIn"), 
        ("Action","&Zoom Out","zoomOut"), 
        ("Action","&Dolly In","dollyIn"), 
        ("Action","&Dolly Out","dollyOut"), 
        ("Action","Pan &Right","panRight"), 
        ("Action","Pan &Left","panLeft"), 
        ("Action","Pan &Up","panUp"),
        ("Action","Pan &Down","panDown"),
        ("Action","Rotate &Right","rotRight"),
        ("Action","Rotate &Left","rotLeft"),
        ("Action","Rotate &Up","rotUp"),
        ("Action","Rotate &Down","rotDown"),  ]),
    ("Popup","&Actions",[
        ("Action","&Wakeup","wakeup"),
        ("Action","&Kill","kill"), 
        ("Action","&Killall","killall"),  ]),
    ("Popup","&Help",[
        ("Action","&Help","help"),
        ("Action","&About","about"), 
        ("Action","&Warning","testwarning"), ]) ]

# Views Menu
def insertViewMenu():
    """Insert the default views menu in the menudata."""
    global MenuData,BuiltinViews
    BuiltinViews = ['front','back','right','left','top','bottom','iso']
    vm = ("Popup","&View",[
        ("VAction","&%s View"%t,("viewNr",i)) for i,t in enumerate(BuiltinViews)
        ])
    MenuData.insert(2,vm)

# This function is here because the menus slot/signal only support integer args
def viewNr(i):
    global BuiltinViews
    """Show one of the builtin views by its number"""
    view(BuiltinViews[i])
    
def view(v):
    """Show a named view, either a builtin or a user defined."""
    global canvas,bbox,BuiltinViews
    if v in BuiltinViews:
        canvas.setView(bbox,v)
        canvas.display()
    else:
        warning("This view has not been created yet")

# Examples Menu
def insertExampleMenu():
    """Insert the examples menu in the menudata."""
    global dirname,example
    dir = os.path.join(dirname,"examples")
    if os.path.isdir(dir):
        example = filter(lambda s:s[-3:]==".py" and s[0]!='.',os.listdir(dir))
    example.sort()
    vm = ("Popup","&Examples",[
        ("VAction","&%s"%os.path.splitext(t)[0],("runExample",i)) for i,t in enumerate(example)
        ])
    MenuData.insert(4,vm)

def runExample(i):
    """Run example i from the list of found examples."""
    global dirname,example
    playFile(os.path.join(dirname,"examples",example[i]),example[i])

# Action buttons (should be put in a toolbar)
def insertActions():
    global tool,action
    action = {}
    #print 
    a = qt.QAction("Continue",qt.QIconSet(qt.QPixmap("next.xpm")),"Continue",0,tool)
    qt.QObject.connect(a,qt.SIGNAL("activated()"),wakeup)
    a.addTo(tool)
    a.setEnabled(False)
    action['Continue'] = a

out=None

# Actions

def NotImplemented():
    warning("This option has not been implemented yet!")
    
save = NotImplemented
saveAs = NotImplemented
record = NotImplemented

def help():
    """Start up the help browser"""
    help = qt.QTextBrowser()
    help.setSource('doc/html/formex.py')

def about():
    about = qt.QMessageBox()
    about.about(about,"About pyFormex",
        Version+"\n\n"
        "pyFormex is a python implementation of Formex algebra\n\n"
        "Copyright 2004 Benedict Verhegghe\n"
        "Distributed under the GNU General Public License.\n\n"
        "Downloads available from ftp://mecatrix.ugent.be/pub/pyformex\n\n"
        "For help or information, mailto benedict.verhegghe@ugent.be\n" )

def testwarning():
    warning("Smoking may be hazardous to your health!")
def warning(s):
    global options
    if options.gui:
        w = qt.QMessageBox()
        w.warning(w,Version,s)
    else:
        print s


##def save():
##    global renwin,savefile
##    SaveRendering(renwin,savefile)
##def saveAs():
##    global renwin,savefile
##    fs = FileSelectionDialog(savefile.getPattern())
##    fn = fs.getFilename()
##    if fn:
##        savefile.setPattern(fn)
##        SaveRendering(renwin,savefile)
def saveImage():
    """Save the current rendering in image format."""
    global canvas
    fs = FileSelectionDialog(pattern="Images (*.png *.jpg)",mode=qt.QFileDialog.AnyFile)
    fn = fs.getFilename()
    if fn:
        fmt = string.upper(os.path.splitext(fn)[1])
        if len(fmt) > 0 and fmt[0] == '.':
            fmt = fmt[1:]
            if fmt == 'JPG':
                fmt = 'JPEG'
        else:
            fmt = 'PNG'
            fn += '.png'
        if fmt in qt.QImage.outputFormats():
            canvas.save(fn,fmt)
        else:
            warning("Sorry, can not save in %s format!\n"
                    "Suggest you use PNG format ;)"%fmt)


def play():
    fs = FileSelectionDialog(".","pyformex scripts (*.frm *.py)")
    fn = fs.getFilename()
    if fn:
        playFile(fn)
def printit():
    global out
    print out
def printbbox():
    global out
    print "bbox ",out.bbox()
def printglobals():
    print globals()

def zoomIn():
    global canvas
    canvas.zoom(0.8)
    canvas.display()
def zoomOut():
    global canvas
    canvas.zoom(1.25)
    canvas.display()
def panRight():
    global canvas
    canvas.camera.pan(+5)
    canvas.display()   
def panLeft():
    global canvas
    canvas.camera.pan(-5)
    canvas.display()   
def panUp():
    global canvas
    canvas.camera.pan(+5,1)
    canvas.display()   
def panDown():
    global canvas
    canvas.camera.pan(-5,1)
    canvas.display()   
def rotRight():
    global canvas
    canvas.camera.rotate(+5)
    canvas.display()   
def rotLeft():
    global canvas
    canvas.camera.rotate(-5)
    canvas.display()   
def rotUp():
    global canvas
    canvas.camera.rotate(+5,1)
    canvas.display()   
def rotDown():
    global canvas
    canvas.camera.rotate(-5,1)
    canvas.display()   
def dollyIn():
    global canvas
    canvas.camera.dolly(0.8)
    canvas.display()   
def dollyOut():
    global canvas
    canvas.camera.dolly(1.25)
    canvas.display()   

def clear():
    """Remove all actors from the canvas"""
    global canvas
    canvas.removeAllActors()
    canvas.clear()
def wireframe():
    global canvas
    canvas.glinit("wireframe")
    canvas.redrawAll()
def smooth():
    global canvas
    canvas.glinit("render")
    canvas.redrawAll()
def redraw():
    global canvas
    canvas.redrawAll()
    
def draw(F,side='front'):
    """Draw a Formex on the canvas.

    This adds an actor to the canvas, and directs the camera to it from
    the specified side. Default is looking in the -z direction.
    Specify side=None if you want to leave the camera settings unchanged.
    If other actors are on the scene, they may be visible as well.
    Clear the canvas before drawing if you only want one actor!
    """
    global canvas,bbox,out
    out = F
    canvas.addActor(FormexActor(F))
    if side:
        bbox = F.bbox()
        canvas.setView(bbox,side)
    # Als side == None zou toch de bbox moeten berekend worden
    # en de camera in/uitgezoomd of gedollied worden.
    canvas.display()
    
def drawProp(F,side='front',color=[black,red,green,blue,cyan,magenta,yellow,white]):
    """Draw a Formex in colors matching the elements property value.

    This is comparable to <draw>, but the elements of the formex are displayed
    in different colors according to the property set. If the formex has no
    properties, it is equivalent to <draw>.
    If no color list is specified, a default one is used. The color index
    used is the property value modulus the number of colors in the list.
    """
    global canvas,bbox,out
    out = F
    if F.p == None:
        draw(F,side)
        return
    # create actors for each value
    for v in F.propSet():
        f = F.hasProp(v)
        i = v % len(color)
        canvas.addActor(FormexActor(f,color[i]))
    if side:
        bbox = F.bbox()
        canvas.setView(bbox,side)
    canvas.display()


def playFile(fn,name=None):
    """Play a formex script from file fn."""
    playScript(file(fn,'r'),fn)

wakeupMode=0  # 0 = sleeping allowed, 1 = stay awake for this script
              # 2 = always stay awake, 3 = stay awake and exit
scriptLock = threading.Lock()
    
def playScript(scr,name="unnamed"):
    """Play a pyformex script scr. scr should be a valid Python text.

    If a second parameter is given, it will be displayed on the status line.
    This is different from execScript in that it starts a new thread,
    enabling the script to be killed.
    """
    global canvas,scriptLock,wakeupMode
    # Try to acquire the scriptLock, if not: return immediately
    # (We only allow one script executing at a time!)
    if not scriptLock.acquire(False):
        return
    status("Running script (%s)" % name)
    canvas.updateGL()
    # We need to pass formex globals to the script
    # This would be done automatically if we put this function
    # in the formex.py file. But hen we need to pass other globals
    # from this file (like draw,...)
    # We might create a module with all operations accepted in
    # scripts.
    g = globals()
    g.update(Formex.globals())
    try:
        exec(scr,g)
    finally:
        scriptLock.release() # release the lock in case of an error
    status("Finished script")
    if wakeupMode > 2:
        exit()
    if wakeupMode < 2:
        wakeupMode = 0

# The sleep functionality has some problems which needs to be solved:
# If a script is played and enters in sleep mode, and the user does not wake
# it up before the next script is played, both get intermixed.
# Also, if a script is unfinished, and you try to close the program,
# It hangs.
# Therefore, it would be good to have some kill() function to cancel
# hanging scripts.

def sleep(timeout=None):
    """Sleep until key/mouse press in the canvas or until timeout"""
    global sleeping,wakeupMode,timer,app,action
    if wakeupMode > 0: # don't bother
        return
    # prepare for getting wakeup event 
    qt.QObject.connect(canvas,qt.PYSIGNAL("wakeup"),wakeup)
    # create a Timer to wakeup after timeout
    if timeout:
        timer = threading.Timer(timeout,wakeup)
        timer.start()
    else:
        timer = None
    # go into sleep mode
    sleeping = True
    action['Continue'].setEnabled(True)
    ## while sleeping, we have to process events
    ## (we could start another thread for this)
    while sleeping:
        app.processEvents()
        time.sleep(0.1)
    action['Continue'].setEnabled(False)
    # ignore further wakeup events
    qt.QObject.disconnect(canvas,qt.PYSIGNAL("wakeup"),wakeup)
        
def wakeup(mode=0):
    """Wake up from the sleep function.

    This is the only way to exit the sleep() function.
    Default is to wake up from the current sleep. A mode > 0
    forces wakeup for longer period.
    """
    global timer,sleeping,wakeupMode
    if timer:
        timer.cancel()
    sleeping = False
    wakeupMode = mode

def kill():
    """Kill the current script"""
    ## For now, this just wakes up the cript to let it finish
    ## We really should implement a kill, e.g. bny raising a user
    ## exception, which is caught by the playScript function
    wakeup(1)

def killall():
    """Kill the current and all subsequent scripts"""
    wakeup(2)

def exit():
    global app,scriptLock
    if app:
        if scriptLock.acquire(False): # try to acquire script lock
            app.quit()  # exit on success (no script running)
        else:
            wakeup(3) # return to let the script finish, then exit
    else: # the gui didn't even start
        sys.exit(0)

def status(s):
    """Display a message in the status line"""
    global statusbar
    statusbar.message(s)

def GUI():
    global canvas,statusbar,menu,tool, options
    w = qt.QMainWindow()
    w.setCaption(Version)
    w.resize(640,480)
    # add widgets to the main window
    statusbar = w.statusBar()
    statusbar.message(Version+" (c) B. Verhegghe")
    menu = w.menuBar()
    insertViewMenu()
    insertExampleMenu()
    AddMenuItems(menu,MenuData)
    tool = qt.QToolBar(w)
    insertActions()
    # Create a nice frame to put around the OpenGL widget
    # Create our display widget
    f = qt.QHBox(w, "frame")
    f.setFrameStyle(qt.QFrame.Sunken | qt.QFrame.Panel)
    f.setLineWidth(2)
    f.resize(640,480)
    fmt = qtgl.QGLFormat.defaultFormat()
    fmt.setDirectRendering(options.dri)
    canvas = Canvas(640,480,fmt,f)
    canvas.clear()
    canvas.camera.setPos(0,0,5)
    # Put the GL widget inside the frame
    w.setCentralWidget(f)
    return w

def runApp(args):
    global app,canvas,gui
    app = qt.QApplication(args)
    qt.QObject.connect(app,qt.SIGNAL("lastWindowClosed()"),app,qt.SLOT("quit()"))
    # create GUI
    gui = GUI()
    app.setMainWidget(gui)
    gui.show()
    canvas.show()
    canvas.clear()
    options.gui = True
    app.exec_loop()
   
def main(argv=None):
    """This is a fairly generic main() function"""
    global options,dirname
    # this allows us to call main from the interpreter
    if argv is None:
        argv = sys.argv
    dirname = os.path.dirname(os.path.realpath(argv[0]))
    #process options
    from optparse import OptionParser,make_option
    parser = OptionParser(
        usage = "usage: %prog [<options>] [ --  <Qapp-options> ]",
        version = Version,
        option_list=[
        make_option("--nodri", help="do not use Direct Rendering",
                    action="store_false", dest="dri", default=True),
        make_option("--debug", help="display logging info to sys.stdout",
                    action="store_true", dest="debug", default=False)
        ])
    (options, args) = parser.parse_args()
    # Run the application
    return runApp(args)

#### Go
if __name__ == "__main__":
    sys.exit(main())

#### End
